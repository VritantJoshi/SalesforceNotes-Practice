AURA COMPONENT:-



<aura:component controller="PaginationController" access="global">

    <!-- Attributes -->
    <!-- type="Contact[]" means a List of Contact type, i.e. List<Contact> -->
    <aura:attribute name="contacts"        type="Contact[]"/>
    <aura:attribute name="columns"         type="List"/>
    <!-- Default page number is 1(start from 1st page). -->
    <aura:attribute name="pageNumber"      type="Integer" default="1"/>
    <!-- Default no. of contact records shown in a single page(can be changed through picklist). -->
    <aura:attribute name="pageSize"        type="Integer" default="5"/>
    <aura:attribute name="totalRecords"    type="Integer"/>
    <aura:attribute name="totalPages"      type="Integer"/>
    <!-- type="Integer[]" means a List of Integer type -->
    <aura:attribute name="pageList"        type="Integer[]" />		
    <aura:attribute name="pageSizeOptions" type="List" />   

    <aura:handler name="init" value="{! this }" action="{! c.loadData }"/>

    <!-- Records Per Page Picklist -->
    <lightning:combobox
        label="Records per page"
        value="{! v.pageSize }"
        onchange="{! c.changePageSize }"
        options="{! v.pageSizeOptions }"
        class="slds-m-bottom_medium"/>
    	<!-- medium margin in the bottom. -->

    <!-- Records Table -->
    <lightning:datatable data="{! v.contacts }" keyField="Id" columns="{! v.columns }" hideCheckboxColumn = "true"/>

    <!-- Pagination Buttons -->
    <div class="slds-m-top_medium">
        <lightning:button label="Previous" onclick="{!c.prevPage}" disabled="{! v.pageNumber == 1 }"/>

        <aura:iteration items="{! v.pageList }" var="p">
            <lightning:button label="{! p }" variant="{! p == v.pageNumber ? 'brand' : 'neutral' }"
                              onclick="{! c.gotoPage }">
                <aura:set attribute="value" value="{! p }"/>
            </lightning:button>
        </aura:iteration>

        <lightning:button label="Next"
                          onclick="{!c.nextPage}"
                          disabled="{! v.pageNumber == v.totalPages }"/>
    </div>
</aura:component>


<!--
	loadData()	Runs once on component init: sets the datatable columns and initializes the picklist options. Then calls the helper to load contacts.
    prevPage()	Moves to previous page and reloads contacts.
    nextPage()	Moves to next page and reloads contacts.
    gotoPage()	When user clicks a page number, it sets that pageNumber and reloads contacts.
    changePageSize()	Triggered when picklist value changes. It:
    • resets pageNumber to 1
    • sets pageSize = selected value
    • calls the helper to reload the contacts using the new page size
-->












PAGINATION CONTROLLER JS:-





({
    loadData : function(component, event, helper) {
        // Set up base column config
        component.set("v.columns", [
            { label: "First Name", fieldName: "FirstName", type: "text" },
            { label: "Last Name",  fieldName: "LastName",  type: "text" },
            { label: "Email",      fieldName: "Email",     type: "email" },
            { label: "Phone",      fieldName: "Phone",     type: "phone" }
        ]);

        // Set options for Records-Per-Page picklist
        // Updated picklist code
        component.set("v.pageSizeOptions", [
            { label: '5',  value: '5' },
            { label: '10', value: '10' },
            { label: '15', value: '15' },
            { label: '20', value: '20' }
        ]);

        helper.loadContacts(component);
    },

    prevPage : function(component, event, helper){
        var currentPage = component.get("v.pageNumber");
        if(currentPage > 1) {
            component.set("v.pageNumber", currentPage - 1);
            helper.loadContacts(component);
        }
    },

    nextPage : function(component, event, helper){
        var currentPage = component.get("v.pageNumber");
        var totalPages  = component.get("v.totalPages");
        if(currentPage < totalPages) {
            component.set("v.pageNumber", currentPage + 1);
            helper.loadContacts(component);
        }
    },

    gotoPage : function(component, event, helper){
        var target = parseInt(event.getSource().get("v.label"), 10);
        component.set("v.pageNumber", target);
        helper.loadContacts(component);
    },
    
	//Updated code for pageSize change.
    changePageSize : function (component, event, helper) {
        var selectedSize = parseInt(event.getSource().get("v.value"), 10);
        component.set("v.pageNumber", 1);           // reset to first page
        component.set("v.pageSize", selectedSize);  // update page size
        helper.loadContacts(component);             // reload records
    }
})










APEX CONTROLLER:-






public with sharing class PaginationController {

    // Returns one page of contacts
    @AuraEnabled(cacheable=true)
    public static List<Contact> getContacts(Integer pageNumber, Integer pageSize) {
        Integer offsetSize = (pageNumber - 1) * pageSize;

        return [
            SELECT Id, FirstName, LastName, Email, Phone
            FROM Contact
            ORDER BY FirstName
            LIMIT :pageSize OFFSET :offsetSize
        ];
    }

    // Returns total number of records (for page links)
    @AuraEnabled(cacheable=true)
    public static Integer getTotalContacts(){
        return [SELECT COUNT() FROM Contact];
    }
}







PAGINATION HELPER JS:-





({
    loadContacts : function (component) {
        //Both are req.d since they're arguments req.d for => 
        //public static List<Contact> getContacts(Integer pageNumber, Integer pageSize) of the Apex controoller class.
        var pageNumber = component.get("v.pageNumber");		
        var pageSize   = component.get("v.pageSize");

        // first, load total record count
        var countAction = component.get("c.getTotalContacts");	//getting total no. of records from Apex controller method.
        countAction.setCallback(this, function(res){
            var total = res.getReturnValue();
            component.set("v.totalRecords", total);

            // build page list
            var totalPages = Math.ceil(total / pageSize);	
            //calculating total no. of pages(same as calculatetotalpages() method in apex controller for vf page.)
            component.set("v.totalPages", totalPages);

            var pages = [];
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);	// creating list of page no.s to show on UI.
            }
            component.set("v.pageList", pages);
        });
        $A.enqueueAction(countAction);

        // then load the records for the current page
        var dataAction = component.get("c.getContacts");
        dataAction.setParams({
            pageNumber : pageNumber,
            pageSize   : pageSize
        });
        dataAction.setCallback(this, function(res){
            component.set("v.contacts", res.getReturnValue());
        });
        $A.enqueueAction(dataAction);
    }
})




